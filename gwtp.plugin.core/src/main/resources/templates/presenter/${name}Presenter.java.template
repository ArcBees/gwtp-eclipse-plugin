#if ( $uihandlers )
    #set( $implements = "implements ${name}UiHandlers" )
    #set( $extendsView = ", HasUiHandlers<${name}UiHandlers>" )
#else
    #set( $implements = "" )
    #set( $extendsView = "" )
#end
#if ( $codesplit )
    #set( $proxy = "@ProxyCodeSplit" )
#else
    #set( $proxy = "@ProxyStandard" )
#end
#if ( $isplace ) 
    #set( $nametokenrendered = "@NameToken(${nametoken})" )
    #set( $proxyExtends = "ProxyPlace" )
#else 
    #set( $nametokenrendered = "" )
    #set( $proxyExtends = "Proxy" )
#end
#if ( $popup )
    #set ( $viewInterface = "PopupView" )
#else
    #set ( $viewInterface = "View" )
#end
package ${package};

import com.google.gwt.event.shared.GwtEvent.Type;
import com.google.inject.Inject;
import com.google.web.bindery.event.shared.EventBus;
#if ( $nested )
    import com.gwtplatform.mvp.client.Presenter;
#else
    import com.gwtplatform.mvp.client.PresenterWidget;
#end
import com.gwtplatform.mvp.client.${viewInterface};
import com.gwtplatform.mvp.client.annotations.ContentSlot;
#if ( $codesplit )
import com.gwtplatform.mvp.client.annotations.ProxyCodeSplit;
#else
import com.gwtplatform.mvp.client.annotations.ProxyStandard;
#end
#if ( $isplace ) 
import com.gwtplatform.mvp.client.proxy.ProxyPlace;
import com.gwtplatform.mvp.client.annotations.NameToken;
#else
import com.gwtplatform.mvp.client.proxy.Proxy;
#end
import com.gwtplatform.mvp.client.proxy.RevealContentHandler;
#if ( $uihandlers )
import com.gwtplatform.mvp.client.HasUiHandlers;
#end
#if ( $preparefromrequest )
import com.gwtplatform.mvp.shared.proxy.PlaceRequest;
#end
${contentSlotImport}
${nameTokenImport}
#if ( $nested )
public class ${name}Presenter extends Presenter<${name}Presenter.MyView, ${name}Presenter.MyProxy> ${implements} {
#else
public class ${name}Presenter extends PresenterWidget<${name}Presenter.MyView> ${implements} {
#end
    interface MyView extends ${viewInterface} ${extendsView} {
    }
    #if ( $nested )
    @ContentSlot
    public static final Type<RevealContentHandler<?>> SLOT_${name} = new Type<RevealContentHandler<?>>();

    ${nametokenrendered}
    ${proxy}
    interface MyProxy extends ${proxyExtends}<${name}Presenter> {
    }
    #end

    @Inject
    ${name}Presenter(
            EventBus eventBus,
        #if ( $nested )
            MyView view, 
            MyProxy proxy) {
        super(eventBus, view, proxy, ${revealType});
        #else
            MyView view) {
        super(eventBus, view);
        #end
        
        #if( $uihandlers ) 
        getView().setUiHandlers(this);
        #end
    }
    
    #if ( $preparefromrequest )
    @Override
    public void prepareFromRequest(PlaceRequest request) {
        super.prepareFromRequest(request);
    }
    
    #end
    #if( $manualreveal )
    @Override
    public boolean useManualReveal() {
        return true;
    }
    
    #end
    #if( $onbind )
    protected void onBind() {
        super.onBind();
    }
    #end
    
    #if( $onreveal )
    protected void onReveal() {
        super.onReveal();
    }
    
    #end
    #if( $onhide )
    protected void onHide() {
        super.onHide();
    }
    
    #end
    #if( $onunbind )
    protected void onUnbind() {
        super.onUnbind();
    }
    
    #end
    #if( $onreset )
    protected void onReset() {
        super.onReset();
    }
    
    #end
}
